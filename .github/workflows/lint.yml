# This workflow tests the project for proper linting

name: Lint and check all

on:
  push:
    branches:
      - '**'        # matches every branch

  # pull_request:
  #   branches:
  #     - '**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Branch
        uses: actions/checkout@v4

      - name: Install dependencies for linting
        run: |
          sudo apt-get update -y
          sudo apt-get install -y python3-dev npm pycodestyle bandit pylint
          sudo npm install -g jshint
          sudo npm install -g @stoplight/spectral-cli

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Make directories
        run: |
          mkdir -p embark/logs embark/uploadFirmwareImages
          touch embark/logs/web.log

      - name: Restore cached Docker images
        id: docker-cache-restore
        uses: actions/cache@v3
        with:
          path: docker-cache/images.tar
          key: embark-docker-images-${{ hashFiles('docker-compose.yml') }}

      - name: Load Docker images from cache
        if: steps.docker-cache-restore.outputs.cache-hit == 'true'
        run: |
          docker load -i docker-cache/images.tar

      - name: Load last checked files list
        id: load-last-checked
        uses: actions/cache@v3
        with:
          path: .last_checked
          key: last-checked-${{ hashFiles('.last_checked') }}
          restore-keys: |
            last-checked-

      - name: Debug last_checked
        run: |
          ls -l .last_checked
          ls -la

      - name: Set env for .venv in project
        run: echo "PIPENV_VENV_IN_PROJECT=1" >> $GITHUB_ENV

      - name: Install Pipenv
        run: pip install --upgrade pipenv

      - name: Restore Pipenv cache
        id: pipenv-cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: pipenv-${{ hashFiles('Pipfile.lock') }}

      - name: Install dependencies
        if: steps.pipenv-cache.outputs.cache-hit != 'true'
        run: pipenv install --deploy --ignore-pipfile --dev # TODO: is the --dev necessary?

      - name: Run check_project.sh
        run: |
          ./dev-tools/check_project.sh --fast
        env:
          PIPENV_VENV_IN_PROJECT: "True"
          DJANGO_SECRET_KEY: $(python3 -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())')
          DATABASE_NAME: "embark"
          DATABASE_USER: "embark"
          DATABASE_PASSWORD: "embark"
          DATABASE_HOST: "127.0.0.1"
          DATABASE_PORT: "3306"
          MYSQL_PASSWORD: "embark"
          MYSQL_USER: "embark"
          MYSQL_DATABASE: "embark"
          REDIS_HOST: "127.0.0.1"
          REDIS_PORT: "7777"
          SECRET_KEY: "$DJANGO_SECRET_KEY"
          HASHID_SALT: "EMBArk1234ยง$S@lt"
          DJANGO_SUPERUSER_PASSWORD:  "embark"
          DJANGO_SUPERUSER_USERNAME:  "superuser"
          DJANGO_SUPERUSER_EMAIL:  "idk@lol.com"

      - name: Save Docker images to cache
        if: steps.docker-cache-restore.outputs.cache-hit != 'true'
        # Requires docker-compose's "images: example:latest" to be on one line
        run: |
          images=$(grep 'image:' docker-compose.yml | awk '{ print $2 }')
          mkdir -p docker-cache
          docker save $images -o docker-cache/images.tar

      - name: Save last checked files list
        # if: github.ref == 'refs/heads/main' # Uncommented for testing purposes
        uses: actions/cache/save@v3
        with:
          path: .last_checked
          key: last-checked-${{ hashFiles('.last_checked') }}
