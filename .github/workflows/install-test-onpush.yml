# This workflow will run build EMBArk in dev-mode

name: Build-EMBArk-DEV-test

on: [push]

jobs:
  Build-embark:
    if: github.repository_owner != 'e-m-b-a'
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          swap-storage: true

      - name: Restore cached Docker images
        id: docker-cache-restore
        uses: actions/cache@v3
        with:
          path: docker-cache/db-images.tar
          key: embark-db-images-v1

      - name: Load Docker image from cache
        if: steps.docker-cache-restore.outputs.cache-hit == 'true'
        run: |
          docker load -i docker-cache/db-images.tar

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Set env for .venv in project
        run: echo "PIPENV_VENV_IN_PROJECT=1" >> $GITHUB_ENV

      - name: Install Pipenv
        run: pip install --upgrade pipenv

      - name: Restore Pipenv cache
        id: pipenv-cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        run: pipenv install --deploy --ignore-pipfile

      - name: EMBArk dev install
        uses: Wandalen/wretry.action@master
        with:
          command: ./installer.sh -sF
          attempt_limit: 3

      - name: Save Docker images to cache
        if: steps.docker-cache-restore.outputs.cache-hit != 'true'
        run: |
          mkdir -p docker-cache
          docker save mysql:latest redis:5 -o docker-cache/db-images.tar
          # docker save embeddedanalyzer/emba -o docker-cache/emba-image.tar

      # - name: Start Debug-server-conf
      #   run: |
      #      sudo ./dev-tools/debug-server-start.sh &
      #      sleep 5m
      #      echo "Let the user test"
      #   timeout-minutes: 10
